@page "/download"

@using Blazored.LocalStorage
@using System.Net.Http.Json
@using System.Text.Json
@using System.Reflection.Metadata
@using ServerBB_Web.Service.Interface
@using ServerBB_Web.Service.Model
@using ServerBB_Web.Service.Refs

@rendermode InteractiveServer

@inject HttpClient _HttpClient
@inject IJSRuntime _JSRuntime
@inject IFileService _FileService
@inject ILocalStorageService _LocalStorage


<script src="javascript/downloadService.js"></script>

<button @onclick="DownloadFiles">Download Files</button>

<div>
    <h2>SuperMarket: @SuperMarket</h2>
    <h2>Pharmacy: @Pharmacy</h2>
    <h2>Total: @Total</h2>
</div>

@code {
    private decimal SuperMarket;
    private decimal Pharmacy;
    private decimal Total;

    private async Task DownloadFiles()
    {


        var response = await _HttpClient.GetAsync("api/bb/multiPartProcessFile2");

        if (response.IsSuccessStatusCode)
        {

            MultiPartResponse multiPartResponse = new MultiPartResponse();
            RecoveredData recoveredData = new RecoveredData();

            var responseString = await response.Content.ReadAsStringAsync();
            
            multiPartResponse = JsonSerializer.Deserialize<MultiPartResponse>(responseString);
            recoveredData = JsonSerializer.Deserialize<RecoveredData>(multiPartResponse.JsonContent);


            //Recuperacao do Json
            SuperMarket = recoveredData.SuperMarket;
            Pharmacy = recoveredData.Pharmacy;
            Total = recoveredData.Total;
            
            //Recuperacao do Arquivo
            
            string fileName = Path.GetFileName(recoveredData.FilePath);
            byte[] fileBytes = multiPartResponse.FileContent;

            // Use o serviço de download para baixar o arquivo
            await _FileService.DownloadFileByteAsync(fileName, fileBytes);

        }
        else
        {
            // Trate o erro conforme necessário
        }
    }
}
