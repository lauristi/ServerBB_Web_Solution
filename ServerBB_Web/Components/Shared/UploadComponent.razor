@using ServerBB_Web.Service.Interface
@using ServerBB_Web.Service.Model
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using System.Globalization

@rendermode InteractiveServer

@inject HttpClient _HttpClient
@inject IJSRuntime _JSRuntime
@inject IFileService _FileService
@inject IMonthService _MonthService

<script src="javascript/downloadService.js"></script>

<div class="jumbotron jumbotron-fluid">
    <div class="form-group row" style="margin-top: 50px;">


        <div class="row" style="margin-top: 25px;">
            <div class="col-sm-4">
                <div class="d-flex align-items-center h-100">
                    <InputFile class="form-control form-control-sm" id="inputFileExpense" type="file" OnChange="HandleExpenseUpload"></InputFile>
                </div>
            </div>
            <div class="col-sm-2">
                <div class="d-flex align-items-center h-100">
                    <button class="btn btn-warning btn-block w-100" style="line-height:1" @onclick="HandleExpenseUploadClick">Enviar Despesas</button>
                </div>
            </div>
        </div>
        @* --------------------------------------------------------------------------------------------------------------------------------------- *@

        <div class="row" style="margin-top: 25px;">
            <div class="col-sm-4">
                <div class="d-flex align-items-center h-100">
                    <InputFile class="form-control form-control-sm" id="inputFileStatement" type="file" OnChange="HandleStatementUpload"></InputFile>
                </div>
            </div>
            <div class="col-sm-2">
                <div class="d-flex align-items-center h-100">
                    <button class="btn btn-primary btn-block w-100" style="line-height:1" @onclick="HandleStatementUploadClick">Enviar Extrato</button>
                </div>
            </div>
        </div>
        @* --------------------------------------------------------------------------------------------------------------------------------------- *@
        <div class="row g-1">
            <!-- Usando g-1 para espaçamento pequeno -->
            @* Mercado *@
            <div class="col" style="padding-left: 5px; padding-right: 5px;">
                <div class="card rounded-3" style="width: 18rem; margin-top: 20px;">
                    <div class="card-body">
                        <h6 class="card-title">Super Mercado:</h6>
                        @{
                            string colorClassSuperMarket = (SuperMarket > 4000) ? "text-danger" : "text-primary";
                        }
                        <h6 class="card-subtitle mb-2 @colorClassSuperMarket">@($"R$ {SuperMarket.ToString("N2", CultureInfo.GetCultureInfo("pt-BR"))}")</h6>
                    </div>
                </div>
            </div>

            @* Farmacia *@
            <div class="col" style="padding-left: 5px; padding-right: 5px;">
                <div class="card rounded-3" style="width: 18rem; margin-top: 20px;">
                    <div class="card-body">
                        <h6 class="card-title">Farmácia:</h6>
                        @{
                            string colorClassPharmacy = (Pharmacy > 4000) ? "text-danger" : "text-primary";
                        }
                        <h6 class="card-subtitle mb-2 @colorClassPharmacy">@($"R$ {Pharmacy.ToString("N2", CultureInfo.GetCultureInfo("pt-BR"))}")</h6>
                    </div>
                </div>
            </div>

            @* Gasto Extra *@
            <div class="col" style="padding-left: 5px; padding-right: 5px;">
                <div class="card rounded-3" style="width: 18rem; margin-top: 20px;">
                    <div class="card-body">
                        <h6 class="card-title">Extra:</h6>
                        @{
                            string colorClassExtra = (Extra > 4000) ? "text-danger" : "text-primary";
                        }
                        <h6 class="card-subtitle mb-2 @colorClassExtra">@($"R$ {Extra.ToString("N2", CultureInfo.GetCultureInfo("pt-BR"))}")</h6>
                    </div>
                </div>
            </div>

            @* Total *@
            <div class="col" style="padding-left: 5px; padding-right: 5px;">
                <div class="card rounded-3" style="width: 18rem; margin-top: 20px;">
                    <div class="card-body">
                        <h6 class="card-title">Total:</h6>
                        @{
                            string colorClassTotal = (Total > 4000) ? "text-danger" : "text-primary";
                        }
                        <h6 class="card-subtitle mb-2 @colorClassTotal">@($"R$ {Total.ToString("N2", CultureInfo.GetCultureInfo("pt-BR"))}")</h6>
                    </div>
                </div>
            </div>
        </div>
        @* --------------------------------------------------------------------------------------------------------------------------------------- *@
    </div>
</div>



@if (ShowMessage)
{
    <div class="form-group row" style="margin-top: 50px;">
        <div class="row">
            <div class="col-sm-4">
                <div class="alert @AlertClass " role="alert" style="margin-top: 5px;">
                    @UploadMessage
                </div>
            </div>
        </div>
    </div>
}

@code {
    
    //Panel
    private decimal SuperMarket;
    private decimal Pharmacy;
    private decimal Extra;
    private decimal Total;
    
    //Alert
    private string UploadMessage { get; set; }
    private string AlertClass { get; set; }
    private bool ShowMessage { get; set; }

    private IReadOnlyList<IBrowserFile> selectedFilesStatement;
    private IReadOnlyList<IBrowserFile> selectedFilesExpenses;

    protected override void OnInitialized()
    {

    }

    #region "Statement"

    private async Task HandleStatementUpload(InputFileChangeEventArgs e)
    {
        //Guarda o arquivo escolhido
        selectedFilesStatement = e.GetMultipleFiles();
    }

    private async Task HandleStatementUploadClick()
    {
        //Envia o arquivo para o endpoint
        if (selectedFilesStatement != null && selectedFilesStatement.Any())
        {
            IBrowserFile browserFile = selectedFilesStatement[0];
            var file = browserFile;

            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                var content = new MultipartFormDataContent();
                content.Add(new StreamContent(memoryStream), "file", file.Name);

                var responseUpload = await _HttpClient.PostAsync("api/bb/uploadStatement", content);

                if (responseUpload.IsSuccessStatusCode)
                {
                    SetUploadMessage("Arquivo enviado com sucesso", "alert-success");

                    //=======================================================================================
                    //download
                    //=======================================================================================

                    // Chamada para baixar o arquivo processado
                    var responseDownload = await _HttpClient.GetAsync("api/bb/multiPartProcessFile2");

                    if (responseDownload.IsSuccessStatusCode)
                    {
                       
                        
                        MultiPartResponse multiPartResponse = new MultiPartResponse();
                        RecoveredData recoveredData = new RecoveredData();

                        var responseDownloadString = await responseDownload.Content.ReadAsStringAsync();

                        multiPartResponse = JsonSerializer.Deserialize<MultiPartResponse>(responseDownloadString);
                        recoveredData = JsonSerializer.Deserialize<RecoveredData>(multiPartResponse.JsonContent);


                        //Recuperacao do Json
                        SuperMarket = recoveredData.SuperMarket;
                        Pharmacy = recoveredData.Pharmacy;
                        Total = recoveredData.Total;

                        //Recuperacao do Arquivo

                        string fileName = Path.GetFileName(recoveredData.FilePath);
                        byte[] fileBytes = multiPartResponse.FileContent;

                        // Use o serviço de download para baixar o arquivo
                        await _FileService.DownloadFileByteAsync(fileName, fileBytes);

                        // Limpa o conteúdo do input file
                        await _FileService.ClearInputFile("inputFileStatement");
                       
                        
                        // Limpa o conteúdo do input file
                        await _FileService.ClearInputFile("inputFileStatement");
                    }
                    else
                    {
                        SetUploadMessage("Falha ao processar o arquivo", "alert-danger");
                    }
                }
                else
                {
                    SetUploadMessage("Falha ao enviar o arquivo", "alert-danger");
                }
            }
        }
    }

    #endregion

    #region "Expenses"

    private async Task HandleExpenseUpload(InputFileChangeEventArgs e)
    {
        //Guarda o arquivo escolhido
        selectedFilesExpenses = e.GetMultipleFiles();
    }

    private async Task HandleExpenseUploadClick()
    {
        //Envia o arquivo para o endpoint
        if (selectedFilesExpenses != null && selectedFilesExpenses.Any())
        {
            IBrowserFile browserFile = selectedFilesExpenses[0];
            var file = browserFile;
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                var content = new MultipartFormDataContent();
                content.Add(new StreamContent(memoryStream), "file", file.Name);

                var response = await _HttpClient.PostAsync("api/bb/uploadExpenses", content);

                if (response.IsSuccessStatusCode)
                {
                    // Limpa o conteúdo do input file
                    await _FileService.ClearInputFile("inputFileExpense");

                    SetUploadMessage("Arquivo enviado com sucesso", "alert-success");
                }
                else
                {
                    SetUploadMessage("Falha ao enviar o arquivo", "alert-danger");
                }
            }
        }
    }

    #endregion

    #region Message Setup

    private void SetUploadMessage(string message, string alertClass)
    {
        UploadMessage = message;
        AlertClass = alertClass;
        ShowMessage = true;

        // Esconde a mensagem após 5 segundos
        Task.Delay(1000).ContinueWith(_ =>
        {
            // O código dentro do InvokeAsync é executado no thread da UI (interface do usuário)
            InvokeAsync(() =>
            {
                ShowMessage = false;
                StateHasChanged(); // Atualiza o componente para refletir a mudança
            });
        });
    }

    # endregion
}
